import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class UniversityTest {
    public static final String NAME = "Robert Silver";
    public static final String QUICK_ID = "rls442";
    private static final String COURSE_NANE = "SE 181";
    University univ;

    @BeforeEach
    void setUp() {
        univ = new University();
    }

    @Test
    void university_has_no_students_to_start() {
        assertTrue(univ.getStudents().isEmpty());
    }

    @Test
    void adding_student_into_univ() {
        univ.addStudent(QUICK_ID, NAME);
        assertEquals(NAME, univ.getStudents().get(QUICK_ID).getName());
    }

    @Test
    void adding_two_students_into_univ() {
        univ.addStudent(QUICK_ID, NAME);
        univ.addStudent(QUICK_ID + "1", NAME + "1");
        assertEquals(NAME + "1", univ.getStudents().get(QUICK_ID + "1").getName());
    }

    @Test
    void enrolling_student_into_a_course() {
        univ.addStudent(QUICK_ID, NAME);
        univ.enrollStudent(QUICK_ID, COURSE_NANE);
        Student actual = univ.getStudents().get(QUICK_ID);
        assertEquals(COURSE_NANE, actual.getCourses().get(0));
    }

    @Test
    void enrolling_student_into_two_courses() {
        univ.addStudent(QUICK_ID, NAME);
        univ.enrollStudent(QUICK_ID, COURSE_NANE);
        univ.enrollStudent(QUICK_ID, COURSE_NANE + "1");
        Student actual = univ.getStudents().get(QUICK_ID);
        assertEquals(COURSE_NANE, actual.getCourses().get(0));
        assertEquals(COURSE_NANE + "1", actual.getCourses().get(1));

    @Test
    void unenroll_student_from_course() {
        univ.addStudent(QUICK_ID, NAME);
        univ.enrollStudent(QUICK_ID, COURSE_NANE);
        univ.unenrollStudent(QUICK_ID, COURSE_NANE);
        Student actual = univ.getStudents().get(QUICK_ID);
        assertTrue(actual.getCourses().isEmpty());
    }
}
